import pytest
import numpy as np
import pandas as pd
import requests as req
import os
import sqlite3
import pickle
from functools import reduce
from bin.match_variants import *

@pytest.fixture
def score():
    ''' Scorefile dataframe with no effect type '''
    d = {'chr_name': [22], 'chr_position': [17080378], 'effect_allele': 'A', 'other_allele': 'G', 'effect_weight': 1, 'effect_type': 'additive'}
    return pd.DataFrame(d)

@pytest.fixture
def bad_score(score):
    ''' Scorefile dataframe with no matches in test target '''
    return score.assign(chr_name = 21)

@pytest.fixture
def score_dict(accession, accession_two, score):
    return { accession: score, accession_two: score }

@pytest.fixture
def score_pkl(score_dict):
    ''' Serialised scorefile '''
    with open('scores.pkl', 'wb') as f:
        pickle.dump(score_dict, f)
    yield 'scores.pkl'
    os.remove('scores.pkl')

@pytest.fixture
def target():
    ''' Target genome bim path '''
    bim = req.get('https://gitlab.ebi.ac.uk/nebfield/test-datasets/-/raw/master/pgsc_calc/cineca_synthetic_subset.bim')
    with open('data.bim', 'wb') as f:
        f.write(bim.content)
    colnames=['#CHROM', 'ID', 'cm', 'POS', 'REF', 'ALT']
    d = pd.read_csv('data.bim', sep = '\t', names=colnames)
    # relabel variant identifiers
    d['ID'] = d[['#CHROM', 'POS', 'REF', 'ALT']].agg(lambda x: ':'.join(x.astype(str)), axis=1)
    d.drop(columns = ['cm'], inplace = True)
    d.to_csv('data.txt', index = False, sep = '\t')
    yield 'data.txt'
    os.remove('data.bim')
    os.remove('data.txt')

@pytest.fixture
def target_df(target):
    ''' Target genome dataframe '''
    return pd.read_csv(target, delimiter = '\t')

@pytest.fixture
def flipped_target_df(target_df):
    ''' Complement all the alleles '''
    flipped = target_df
    flipped[['REF', 'ALT']] = target_df[['REF', 'ALT']].apply(lambda x: [complement(x['REF']), complement(x['ALT'])], axis = 1, result_type='broadcast')
    return flipped

@pytest.fixture
def accession():
    ''' Dummy accession '''
    return 'PGS000001'

@pytest.fixture
def accession_two():
    ''' Dummy accession '''
    return 'PGS000002'

@pytest.fixture
def report():
    ''' Output report path (generated by test_main) '''
    yield 'report.csv'
    os.remove('report.csv')

@pytest.fixture
def db():
    ''' Output database path (generated by test_main) '''
    yield 'match_variants.db'
    os.remove('match_variants.db')

@pytest.fixture
def out_scorefile():
    ''' Output scorefile path (generated by test_main) '''
    yield 'false_additive_0.scorefile'
    os.remove('false_additive_0.scorefile')

def test_unduplicate_variants(target_df):
    d = unduplicate_variants(target_df)
    assert isinstance(d, dict)
    assert d['ea_ref'].shape == target_df.shape
    assert d['ea_alt'].empty

def test_complement():
    assert complement('AC') == 'TG'
    assert complement('T') == 'A'
    assert complement('C') == 'G'
    assert complement('G') == 'C'

def test_split_effect(score):
    split = split_effect_type(score)
    assert 'additive' in split
    assert split['additive'].shape[0] == score.shape[0]

def test_main(score_pkl, target, report, db, out_scorefile):
    main(args = ['-d', 'test', '-s', score_pkl, '-t', target, '-m',' 0.95'])

    assert os.path.exists(report)
    assert os.path.exists(db)
    assert os.path.exists(out_scorefile)

    with pytest.raises(SystemExit):
        main(args = [''])

def test_match_flipped(score, bad_score, flipped_target_df):
    ''' Variant should match after complementing '''
    matches = match_flipped(score, flipped_target_df)
    assert score.shape[0] == matches.shape[0]

    assert match_flipped(bad_score, flipped_target_df).empty

def test_match(score, bad_score, target_df):
    assert not match_ea_ref(score, target_df).empty
    assert match_ea_alt(score, target_df).empty
    assert match_ea_ref(bad_score, target_df).empty
    assert match_ea_alt(bad_score, target_df).empty
